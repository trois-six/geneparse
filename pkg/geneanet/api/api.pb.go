// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: pkg/geneanet/api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Calendar int32

const (
	Calendar_GREGORIAN Calendar = 0
	Calendar_JULIAN    Calendar = 1
	Calendar_FRENCH    Calendar = 2
	Calendar_HEBREW    Calendar = 3
)

// Enum value maps for Calendar.
var (
	Calendar_name = map[int32]string{
		0: "GREGORIAN",
		1: "JULIAN",
		2: "FRENCH",
		3: "HEBREW",
	}
	Calendar_value = map[string]int32{
		"GREGORIAN": 0,
		"JULIAN":    1,
		"FRENCH":    2,
		"HEBREW":    3,
	}
)

func (x Calendar) Enum() *Calendar {
	p := new(Calendar)
	*p = x
	return p
}

func (x Calendar) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Calendar) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_geneanet_api_proto_enumTypes[0].Descriptor()
}

func (Calendar) Type() protoreflect.EnumType {
	return &file_pkg_geneanet_api_proto_enumTypes[0]
}

func (x Calendar) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Calendar) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Calendar(num)
	return nil
}

// Deprecated: Use Calendar.Descriptor instead.
func (Calendar) EnumDescriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{0}
}

type Precision int32

const (
	Precision_SURE    Precision = 0
	Precision_ABOUT   Precision = 1
	Precision_MAYBE   Precision = 2
	Precision_BEFORE  Precision = 3
	Precision_AFTER   Precision = 4
	Precision_ORYEAR  Precision = 5
	Precision_YEARINT Precision = 6
)

// Enum value maps for Precision.
var (
	Precision_name = map[int32]string{
		0: "SURE",
		1: "ABOUT",
		2: "MAYBE",
		3: "BEFORE",
		4: "AFTER",
		5: "ORYEAR",
		6: "YEARINT",
	}
	Precision_value = map[string]int32{
		"SURE":    0,
		"ABOUT":   1,
		"MAYBE":   2,
		"BEFORE":  3,
		"AFTER":   4,
		"ORYEAR":  5,
		"YEARINT": 6,
	}
)

func (x Precision) Enum() *Precision {
	p := new(Precision)
	*p = x
	return p
}

func (x Precision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Precision) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_geneanet_api_proto_enumTypes[1].Descriptor()
}

func (Precision) Type() protoreflect.EnumType {
	return &file_pkg_geneanet_api_proto_enumTypes[1]
}

func (x Precision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Precision) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Precision(num)
	return nil
}

// Deprecated: Use Precision.Descriptor instead.
func (Precision) EnumDescriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{1}
}

type Sex int32

const (
	Sex_MALE    Sex = 0
	Sex_FEMALE  Sex = 1
	Sex_UNKNOWN Sex = 2
)

// Enum value maps for Sex.
var (
	Sex_name = map[int32]string{
		0: "MALE",
		1: "FEMALE",
		2: "UNKNOWN",
	}
	Sex_value = map[string]int32{
		"MALE":    0,
		"FEMALE":  1,
		"UNKNOWN": 2,
	}
)

func (x Sex) Enum() *Sex {
	p := new(Sex)
	*p = x
	return p
}

func (x Sex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sex) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_geneanet_api_proto_enumTypes[2].Descriptor()
}

func (Sex) Type() protoreflect.EnumType {
	return &file_pkg_geneanet_api_proto_enumTypes[2]
}

func (x Sex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Sex) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Sex(num)
	return nil
}

// Deprecated: Use Sex.Descriptor instead.
func (Sex) EnumDescriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{2}
}

type DeathType int32

const (
	DeathType_NOT_DEAD            DeathType = 0
	DeathType_DEAD                DeathType = 1
	DeathType_DEAD_YOUNG          DeathType = 2
	DeathType_DEAD_DONT_KNOW_WHEN DeathType = 3
	DeathType_DONT_KNOW_IF_DEAD   DeathType = 4
	DeathType_OF_COURSE_DEAD      DeathType = 5
)

// Enum value maps for DeathType.
var (
	DeathType_name = map[int32]string{
		0: "NOT_DEAD",
		1: "DEAD",
		2: "DEAD_YOUNG",
		3: "DEAD_DONT_KNOW_WHEN",
		4: "DONT_KNOW_IF_DEAD",
		5: "OF_COURSE_DEAD",
	}
	DeathType_value = map[string]int32{
		"NOT_DEAD":            0,
		"DEAD":                1,
		"DEAD_YOUNG":          2,
		"DEAD_DONT_KNOW_WHEN": 3,
		"DONT_KNOW_IF_DEAD":   4,
		"OF_COURSE_DEAD":      5,
	}
)

func (x DeathType) Enum() *DeathType {
	p := new(DeathType)
	*p = x
	return p
}

func (x DeathType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeathType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_geneanet_api_proto_enumTypes[3].Descriptor()
}

func (DeathType) Type() protoreflect.EnumType {
	return &file_pkg_geneanet_api_proto_enumTypes[3]
}

func (x DeathType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeathType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeathType(num)
	return nil
}

// Deprecated: Use DeathType.Descriptor instead.
func (DeathType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{3}
}

type MarriageType int32

const (
	MarriageType_MARRIED                    MarriageType = 0
	MarriageType_NOT_MARRIED                MarriageType = 1
	MarriageType_ENGAGED                    MarriageType = 2
	MarriageType_NO_SEXES_CHECK_NOT_MARRIED MarriageType = 3
	MarriageType_NO_MENTION                 MarriageType = 4
	MarriageType_NO_SEXES_CHECK_MARRIED     MarriageType = 5
	MarriageType_MARRIAGE_BANN              MarriageType = 6
	MarriageType_MARRIAGE_CONTRACT          MarriageType = 7
	MarriageType_MARRIAGE_LICENSE           MarriageType = 8
	MarriageType_PACS                       MarriageType = 9
	MarriageType_RESIDENCE                  MarriageType = 10
)

// Enum value maps for MarriageType.
var (
	MarriageType_name = map[int32]string{
		0:  "MARRIED",
		1:  "NOT_MARRIED",
		2:  "ENGAGED",
		3:  "NO_SEXES_CHECK_NOT_MARRIED",
		4:  "NO_MENTION",
		5:  "NO_SEXES_CHECK_MARRIED",
		6:  "MARRIAGE_BANN",
		7:  "MARRIAGE_CONTRACT",
		8:  "MARRIAGE_LICENSE",
		9:  "PACS",
		10: "RESIDENCE",
	}
	MarriageType_value = map[string]int32{
		"MARRIED":                    0,
		"NOT_MARRIED":                1,
		"ENGAGED":                    2,
		"NO_SEXES_CHECK_NOT_MARRIED": 3,
		"NO_MENTION":                 4,
		"NO_SEXES_CHECK_MARRIED":     5,
		"MARRIAGE_BANN":              6,
		"MARRIAGE_CONTRACT":          7,
		"MARRIAGE_LICENSE":           8,
		"PACS":                       9,
		"RESIDENCE":                  10,
	}
)

func (x MarriageType) Enum() *MarriageType {
	p := new(MarriageType)
	*p = x
	return p
}

func (x MarriageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarriageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_geneanet_api_proto_enumTypes[4].Descriptor()
}

func (MarriageType) Type() protoreflect.EnumType {
	return &file_pkg_geneanet_api_proto_enumTypes[4]
}

func (x MarriageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MarriageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MarriageType(num)
	return nil
}

// Deprecated: Use MarriageType.Descriptor instead.
func (MarriageType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{4}
}

type DivorceType int32

const (
	DivorceType_NOT_DIVORCED DivorceType = 0
	DivorceType_DIVORCED     DivorceType = 1
	DivorceType_SEPARATED    DivorceType = 2
)

// Enum value maps for DivorceType.
var (
	DivorceType_name = map[int32]string{
		0: "NOT_DIVORCED",
		1: "DIVORCED",
		2: "SEPARATED",
	}
	DivorceType_value = map[string]int32{
		"NOT_DIVORCED": 0,
		"DIVORCED":     1,
		"SEPARATED":    2,
	}
)

func (x DivorceType) Enum() *DivorceType {
	p := new(DivorceType)
	*p = x
	return p
}

func (x DivorceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DivorceType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_geneanet_api_proto_enumTypes[5].Descriptor()
}

func (DivorceType) Type() protoreflect.EnumType {
	return &file_pkg_geneanet_api_proto_enumTypes[5]
}

func (x DivorceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DivorceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DivorceType(num)
	return nil
}

// Deprecated: Use DivorceType.Descriptor instead.
func (DivorceType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{5}
}

type RelationParentType int32

const (
	RelationParentType_RPT_ADOPTION         RelationParentType = 0
	RelationParentType_RPT_RECOGNITION      RelationParentType = 1
	RelationParentType_RPT_CANDIDATE_PARENT RelationParentType = 2
	RelationParentType_RPT_GOD_PARENT       RelationParentType = 3
	RelationParentType_RPT_FOSTER_PARENT    RelationParentType = 4
)

// Enum value maps for RelationParentType.
var (
	RelationParentType_name = map[int32]string{
		0: "RPT_ADOPTION",
		1: "RPT_RECOGNITION",
		2: "RPT_CANDIDATE_PARENT",
		3: "RPT_GOD_PARENT",
		4: "RPT_FOSTER_PARENT",
	}
	RelationParentType_value = map[string]int32{
		"RPT_ADOPTION":         0,
		"RPT_RECOGNITION":      1,
		"RPT_CANDIDATE_PARENT": 2,
		"RPT_GOD_PARENT":       3,
		"RPT_FOSTER_PARENT":    4,
	}
)

func (x RelationParentType) Enum() *RelationParentType {
	p := new(RelationParentType)
	*p = x
	return p
}

func (x RelationParentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationParentType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_geneanet_api_proto_enumTypes[6].Descriptor()
}

func (RelationParentType) Type() protoreflect.EnumType {
	return &file_pkg_geneanet_api_proto_enumTypes[6]
}

func (x RelationParentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RelationParentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RelationParentType(num)
	return nil
}

// Deprecated: Use RelationParentType.Descriptor instead.
func (RelationParentType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{6}
}

type TitleType int32

const (
	TitleType_TITLE_MAIN TitleType = 0
	TitleType_TITLE_NAME TitleType = 1
	TitleType_TITLE_NONE TitleType = 2
)

// Enum value maps for TitleType.
var (
	TitleType_name = map[int32]string{
		0: "TITLE_MAIN",
		1: "TITLE_NAME",
		2: "TITLE_NONE",
	}
	TitleType_value = map[string]int32{
		"TITLE_MAIN": 0,
		"TITLE_NAME": 1,
		"TITLE_NONE": 2,
	}
)

func (x TitleType) Enum() *TitleType {
	p := new(TitleType)
	*p = x
	return p
}

func (x TitleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TitleType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_geneanet_api_proto_enumTypes[7].Descriptor()
}

func (TitleType) Type() protoreflect.EnumType {
	return &file_pkg_geneanet_api_proto_enumTypes[7]
}

func (x TitleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TitleType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TitleType(num)
	return nil
}

// Deprecated: Use TitleType.Descriptor instead.
func (TitleType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{7}
}

type Access int32

const (
	Access_ACCESS_IFTITLES Access = 0
	Access_ACCESS_PUBLIC   Access = 1
	Access_ACCESS_PRIVATE  Access = 2
)

// Enum value maps for Access.
var (
	Access_name = map[int32]string{
		0: "ACCESS_IFTITLES",
		1: "ACCESS_PUBLIC",
		2: "ACCESS_PRIVATE",
	}
	Access_value = map[string]int32{
		"ACCESS_IFTITLES": 0,
		"ACCESS_PUBLIC":   1,
		"ACCESS_PRIVATE":  2,
	}
)

func (x Access) Enum() *Access {
	p := new(Access)
	*p = x
	return p
}

func (x Access) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Access) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_geneanet_api_proto_enumTypes[8].Descriptor()
}

func (Access) Type() protoreflect.EnumType {
	return &file_pkg_geneanet_api_proto_enumTypes[8]
}

func (x Access) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Access) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Access(num)
	return nil
}

// Deprecated: Use Access.Descriptor instead.
func (Access) EnumDescriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{8}
}

type EventName int32

const (
	EventName_EPERS_BIRTH                   EventName = 0
	EventName_EPERS_BAPTISM                 EventName = 1
	EventName_EPERS_DEATH                   EventName = 2
	EventName_EPERS_BURIAL                  EventName = 3
	EventName_EPERS_CREMATION               EventName = 4
	EventName_EPERS_ACCOMPLISHMENT          EventName = 5
	EventName_EPERS_ACQUISITION             EventName = 6
	EventName_EPERS_ADHESION                EventName = 7
	EventName_EPERS_BAPTISMLDS              EventName = 8
	EventName_EPERS_BARMITZVAH              EventName = 9
	EventName_EPERS_BATMITZVAH              EventName = 10
	EventName_EPERS_BENEDICTION             EventName = 11
	EventName_EPERS_CHANGENAME              EventName = 12
	EventName_EPERS_CIRCUMCISION            EventName = 13
	EventName_EPERS_CONFIRMATION            EventName = 14
	EventName_EPERS_CONFIRMATIONLDS         EventName = 15
	EventName_EPERS_DECORATION              EventName = 16
	EventName_EPERS_DEMOBILISATIONMILITAIRE EventName = 17
	EventName_EPERS_DIPLOMA                 EventName = 18
	EventName_EPERS_DISTINCTION             EventName = 19
	EventName_EPERS_DOTATION                EventName = 20
	EventName_EPERS_DOTATIONLDS             EventName = 21
	EventName_EPERS_EDUCATION               EventName = 22
	EventName_EPERS_ELECTION                EventName = 23
	EventName_EPERS_EMIGRATION              EventName = 24
	EventName_EPERS_EXCOMMUNICATION         EventName = 25
	EventName_EPERS_FAMILYLINKLDS           EventName = 26
	EventName_EPERS_FIRSTCOMMUNION          EventName = 27
	EventName_EPERS_FUNERAL                 EventName = 28
	EventName_EPERS_GRADUATE                EventName = 29
	EventName_EPERS_HOSPITALISATION         EventName = 30
	EventName_EPERS_ILLNESS                 EventName = 31
	EventName_EPERS_IMMIGRATION             EventName = 32
	EventName_EPERS_LISTEPASSENGER          EventName = 33
	EventName_EPERS_MILITARYDISTINCTION     EventName = 34
	EventName_EPERS_MILITARYPROMOTION       EventName = 35
	EventName_EPERS_MILITARYSERVICE         EventName = 36
	EventName_EPERS_MOBILISATIONMILITAIRE   EventName = 37
	EventName_EPERS_NATURALISATION          EventName = 38
	EventName_EPERS_OCCUPATION              EventName = 39
	EventName_EPERS_ORDINATION              EventName = 40
	EventName_EPERS_PROPERTY                EventName = 41
	EventName_EPERS_RECENSEMENT             EventName = 42
	EventName_EPERS_RESIDENCE               EventName = 43
	EventName_EPERS_RETIRED                 EventName = 44
	EventName_EPERS_SCELLENTCHILDLDS        EventName = 45
	EventName_EPERS_SCELLENTPARENTLDS       EventName = 46
	EventName_EPERS_SCELLENTSPOUSELDS       EventName = 47
	EventName_EPERS_VENTEBIEN               EventName = 48
	EventName_EPERS_WILL                    EventName = 49
	EventName_EFAM_MARRIAGE                 EventName = 50
	EventName_EFAM_NO_MARRIAGE              EventName = 51
	EventName_EFAM_NO_MENTION               EventName = 52
	EventName_EFAM_ENGAGE                   EventName = 53
	EventName_EFAM_DIVORCE                  EventName = 54
	EventName_EFAM_SEPARATED                EventName = 55
	EventName_EFAM_ANNULATION               EventName = 56
	EventName_EFAM_MARRIAGE_BANN            EventName = 57
	EventName_EFAM_MARRIAGE_CONTRACT        EventName = 58
	EventName_EFAM_MARRIAGE_LICENSE         EventName = 59
	EventName_EFAM_PACS                     EventName = 60
	EventName_EFAM_RESIDENCE                EventName = 61
)

// Enum value maps for EventName.
var (
	EventName_name = map[int32]string{
		0:  "EPERS_BIRTH",
		1:  "EPERS_BAPTISM",
		2:  "EPERS_DEATH",
		3:  "EPERS_BURIAL",
		4:  "EPERS_CREMATION",
		5:  "EPERS_ACCOMPLISHMENT",
		6:  "EPERS_ACQUISITION",
		7:  "EPERS_ADHESION",
		8:  "EPERS_BAPTISMLDS",
		9:  "EPERS_BARMITZVAH",
		10: "EPERS_BATMITZVAH",
		11: "EPERS_BENEDICTION",
		12: "EPERS_CHANGENAME",
		13: "EPERS_CIRCUMCISION",
		14: "EPERS_CONFIRMATION",
		15: "EPERS_CONFIRMATIONLDS",
		16: "EPERS_DECORATION",
		17: "EPERS_DEMOBILISATIONMILITAIRE",
		18: "EPERS_DIPLOMA",
		19: "EPERS_DISTINCTION",
		20: "EPERS_DOTATION",
		21: "EPERS_DOTATIONLDS",
		22: "EPERS_EDUCATION",
		23: "EPERS_ELECTION",
		24: "EPERS_EMIGRATION",
		25: "EPERS_EXCOMMUNICATION",
		26: "EPERS_FAMILYLINKLDS",
		27: "EPERS_FIRSTCOMMUNION",
		28: "EPERS_FUNERAL",
		29: "EPERS_GRADUATE",
		30: "EPERS_HOSPITALISATION",
		31: "EPERS_ILLNESS",
		32: "EPERS_IMMIGRATION",
		33: "EPERS_LISTEPASSENGER",
		34: "EPERS_MILITARYDISTINCTION",
		35: "EPERS_MILITARYPROMOTION",
		36: "EPERS_MILITARYSERVICE",
		37: "EPERS_MOBILISATIONMILITAIRE",
		38: "EPERS_NATURALISATION",
		39: "EPERS_OCCUPATION",
		40: "EPERS_ORDINATION",
		41: "EPERS_PROPERTY",
		42: "EPERS_RECENSEMENT",
		43: "EPERS_RESIDENCE",
		44: "EPERS_RETIRED",
		45: "EPERS_SCELLENTCHILDLDS",
		46: "EPERS_SCELLENTPARENTLDS",
		47: "EPERS_SCELLENTSPOUSELDS",
		48: "EPERS_VENTEBIEN",
		49: "EPERS_WILL",
		50: "EFAM_MARRIAGE",
		51: "EFAM_NO_MARRIAGE",
		52: "EFAM_NO_MENTION",
		53: "EFAM_ENGAGE",
		54: "EFAM_DIVORCE",
		55: "EFAM_SEPARATED",
		56: "EFAM_ANNULATION",
		57: "EFAM_MARRIAGE_BANN",
		58: "EFAM_MARRIAGE_CONTRACT",
		59: "EFAM_MARRIAGE_LICENSE",
		60: "EFAM_PACS",
		61: "EFAM_RESIDENCE",
	}
	EventName_value = map[string]int32{
		"EPERS_BIRTH":                   0,
		"EPERS_BAPTISM":                 1,
		"EPERS_DEATH":                   2,
		"EPERS_BURIAL":                  3,
		"EPERS_CREMATION":               4,
		"EPERS_ACCOMPLISHMENT":          5,
		"EPERS_ACQUISITION":             6,
		"EPERS_ADHESION":                7,
		"EPERS_BAPTISMLDS":              8,
		"EPERS_BARMITZVAH":              9,
		"EPERS_BATMITZVAH":              10,
		"EPERS_BENEDICTION":             11,
		"EPERS_CHANGENAME":              12,
		"EPERS_CIRCUMCISION":            13,
		"EPERS_CONFIRMATION":            14,
		"EPERS_CONFIRMATIONLDS":         15,
		"EPERS_DECORATION":              16,
		"EPERS_DEMOBILISATIONMILITAIRE": 17,
		"EPERS_DIPLOMA":                 18,
		"EPERS_DISTINCTION":             19,
		"EPERS_DOTATION":                20,
		"EPERS_DOTATIONLDS":             21,
		"EPERS_EDUCATION":               22,
		"EPERS_ELECTION":                23,
		"EPERS_EMIGRATION":              24,
		"EPERS_EXCOMMUNICATION":         25,
		"EPERS_FAMILYLINKLDS":           26,
		"EPERS_FIRSTCOMMUNION":          27,
		"EPERS_FUNERAL":                 28,
		"EPERS_GRADUATE":                29,
		"EPERS_HOSPITALISATION":         30,
		"EPERS_ILLNESS":                 31,
		"EPERS_IMMIGRATION":             32,
		"EPERS_LISTEPASSENGER":          33,
		"EPERS_MILITARYDISTINCTION":     34,
		"EPERS_MILITARYPROMOTION":       35,
		"EPERS_MILITARYSERVICE":         36,
		"EPERS_MOBILISATIONMILITAIRE":   37,
		"EPERS_NATURALISATION":          38,
		"EPERS_OCCUPATION":              39,
		"EPERS_ORDINATION":              40,
		"EPERS_PROPERTY":                41,
		"EPERS_RECENSEMENT":             42,
		"EPERS_RESIDENCE":               43,
		"EPERS_RETIRED":                 44,
		"EPERS_SCELLENTCHILDLDS":        45,
		"EPERS_SCELLENTPARENTLDS":       46,
		"EPERS_SCELLENTSPOUSELDS":       47,
		"EPERS_VENTEBIEN":               48,
		"EPERS_WILL":                    49,
		"EFAM_MARRIAGE":                 50,
		"EFAM_NO_MARRIAGE":              51,
		"EFAM_NO_MENTION":               52,
		"EFAM_ENGAGE":                   53,
		"EFAM_DIVORCE":                  54,
		"EFAM_SEPARATED":                55,
		"EFAM_ANNULATION":               56,
		"EFAM_MARRIAGE_BANN":            57,
		"EFAM_MARRIAGE_CONTRACT":        58,
		"EFAM_MARRIAGE_LICENSE":         59,
		"EFAM_PACS":                     60,
		"EFAM_RESIDENCE":                61,
	}
)

func (x EventName) Enum() *EventName {
	p := new(EventName)
	*p = x
	return p
}

func (x EventName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventName) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_geneanet_api_proto_enumTypes[9].Descriptor()
}

func (EventName) Type() protoreflect.EnumType {
	return &file_pkg_geneanet_api_proto_enumTypes[9]
}

func (x EventName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EventName) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EventName(num)
	return nil
}

// Deprecated: Use EventName.Descriptor instead.
func (EventName) EnumDescriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{9}
}

type WitnessType int32

const (
	WitnessType_WITNESS           WitnessType = 0
	WitnessType_WITNESS_GODPARENT WitnessType = 1
	WitnessType_WITNESS_OFFICER   WitnessType = 2
)

// Enum value maps for WitnessType.
var (
	WitnessType_name = map[int32]string{
		0: "WITNESS",
		1: "WITNESS_GODPARENT",
		2: "WITNESS_OFFICER",
	}
	WitnessType_value = map[string]int32{
		"WITNESS":           0,
		"WITNESS_GODPARENT": 1,
		"WITNESS_OFFICER":   2,
	}
)

func (x WitnessType) Enum() *WitnessType {
	p := new(WitnessType)
	*p = x
	return p
}

func (x WitnessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WitnessType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_geneanet_api_proto_enumTypes[10].Descriptor()
}

func (WitnessType) Type() protoreflect.EnumType {
	return &file_pkg_geneanet_api_proto_enumTypes[10]
}

func (x WitnessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WitnessType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WitnessType(num)
	return nil
}

// Deprecated: Use WitnessType.Descriptor instead.
func (WitnessType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{10}
}

type Dmy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day   *int32 `protobuf:"varint,1,req,name=day" json:"day,omitempty"`
	Month *int32 `protobuf:"varint,2,req,name=month" json:"month,omitempty"`
	Year  *int32 `protobuf:"varint,3,req,name=year" json:"year,omitempty"`
	Delta *int32 `protobuf:"varint,4,req,name=delta" json:"delta,omitempty"`
}

func (x *Dmy) Reset() {
	*x = Dmy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_geneanet_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dmy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dmy) ProtoMessage() {}

func (x *Dmy) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_geneanet_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dmy.ProtoReflect.Descriptor instead.
func (*Dmy) Descriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{0}
}

func (x *Dmy) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *Dmy) GetMonth() int32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *Dmy) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *Dmy) GetDelta() int32 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cal  *Calendar  `protobuf:"varint,2,opt,name=cal,enum=Calendar" json:"cal,omitempty"`
	Prec *Precision `protobuf:"varint,3,opt,name=prec,enum=Precision" json:"prec,omitempty"`
	Dmy  *Dmy       `protobuf:"bytes,4,opt,name=dmy" json:"dmy,omitempty"`
	Dmy2 *Dmy       `protobuf:"bytes,5,opt,name=dmy2" json:"dmy2,omitempty"`
	Text *string    `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_geneanet_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_geneanet_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{1}
}

func (x *Date) GetCal() Calendar {
	if x != nil && x.Cal != nil {
		return *x.Cal
	}
	return Calendar_GREGORIAN
}

func (x *Date) GetPrec() Precision {
	if x != nil && x.Prec != nil {
		return *x.Prec
	}
	return Precision_SURE
}

func (x *Date) GetDmy() *Dmy {
	if x != nil {
		return x.Dmy
	}
	return nil
}

func (x *Date) GetDmy2() *Dmy {
	if x != nil {
		return x.Dmy2
	}
	return nil
}

func (x *Date) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type RelationParent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Father  *int32              `protobuf:"varint,1,opt,name=father" json:"father,omitempty"`
	Mother  *int32              `protobuf:"varint,2,opt,name=mother" json:"mother,omitempty"`
	Source  *string             `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	RptType *RelationParentType `protobuf:"varint,4,req,name=rpt_type,json=rptType,enum=RelationParentType" json:"rpt_type,omitempty"`
}

func (x *RelationParent) Reset() {
	*x = RelationParent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_geneanet_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationParent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationParent) ProtoMessage() {}

func (x *RelationParent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_geneanet_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationParent.ProtoReflect.Descriptor instead.
func (*RelationParent) Descriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{2}
}

func (x *RelationParent) GetFather() int32 {
	if x != nil && x.Father != nil {
		return *x.Father
	}
	return 0
}

func (x *RelationParent) GetMother() int32 {
	if x != nil && x.Mother != nil {
		return *x.Mother
	}
	return 0
}

func (x *RelationParent) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *RelationParent) GetRptType() RelationParentType {
	if x != nil && x.RptType != nil {
		return *x.RptType
	}
	return RelationParentType_RPT_ADOPTION
}

type Title struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleType *TitleType `protobuf:"varint,1,req,name=title_type,json=titleType,enum=TitleType" json:"title_type,omitempty"`
	Name      *string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Title     *string    `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Fief      *string    `protobuf:"bytes,4,opt,name=fief" json:"fief,omitempty"`
	DateBegin *Date      `protobuf:"bytes,5,opt,name=date_begin,json=dateBegin" json:"date_begin,omitempty"`
	DateEnd   *Date      `protobuf:"bytes,6,opt,name=date_end,json=dateEnd" json:"date_end,omitempty"`
	Nth       *int32     `protobuf:"varint,7,opt,name=nth" json:"nth,omitempty"`
}

func (x *Title) Reset() {
	*x = Title{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_geneanet_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Title) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Title) ProtoMessage() {}

func (x *Title) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_geneanet_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Title.ProtoReflect.Descriptor instead.
func (*Title) Descriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{3}
}

func (x *Title) GetTitleType() TitleType {
	if x != nil && x.TitleType != nil {
		return *x.TitleType
	}
	return TitleType_TITLE_MAIN
}

func (x *Title) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Title) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Title) GetFief() string {
	if x != nil && x.Fief != nil {
		return *x.Fief
	}
	return ""
}

func (x *Title) GetDateBegin() *Date {
	if x != nil {
		return x.DateBegin
	}
	return nil
}

func (x *Title) GetDateEnd() *Date {
	if x != nil {
		return x.DateEnd
	}
	return nil
}

func (x *Title) GetNth() int32 {
	if x != nil && x.Nth != nil {
		return *x.Nth
	}
	return 0
}

type WitnessEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WitnessType *WitnessType `protobuf:"varint,1,req,name=witness_type,json=witnessType,enum=WitnessType" json:"witness_type,omitempty"`
	Witness     *int32       `protobuf:"varint,2,req,name=witness" json:"witness,omitempty"`
}

func (x *WitnessEvent) Reset() {
	*x = WitnessEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_geneanet_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WitnessEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WitnessEvent) ProtoMessage() {}

func (x *WitnessEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_geneanet_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WitnessEvent.ProtoReflect.Descriptor instead.
func (*WitnessEvent) Descriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{4}
}

func (x *WitnessEvent) GetWitnessType() WitnessType {
	if x != nil && x.WitnessType != nil {
		return *x.WitnessType
	}
	return WitnessType_WITNESS
}

func (x *WitnessEvent) GetWitness() int32 {
	if x != nil && x.Witness != nil {
		return *x.Witness
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *EventName      `protobuf:"varint,1,opt,name=name,enum=EventName" json:"name,omitempty"`
	Text        *string         `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Date        *Date           `protobuf:"bytes,3,opt,name=date" json:"date,omitempty"`
	Place       *string         `protobuf:"bytes,4,opt,name=place" json:"place,omitempty"`
	Reason      *string         `protobuf:"bytes,5,opt,name=reason" json:"reason,omitempty"`
	Note        *string         `protobuf:"bytes,6,opt,name=note" json:"note,omitempty"`
	Src         *string         `protobuf:"bytes,7,opt,name=src" json:"src,omitempty"`
	Witnesses   []*WitnessEvent `protobuf:"bytes,8,rep,name=witnesses" json:"witnesses,omitempty"`
	IndexSpouse *int32          `protobuf:"varint,9,opt,name=index_spouse,json=indexSpouse" json:"index_spouse,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_geneanet_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_geneanet_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{5}
}

func (x *Event) GetName() EventName {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return EventName_EPERS_BIRTH
}

func (x *Event) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Event) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Event) GetPlace() string {
	if x != nil && x.Place != nil {
		return *x.Place
	}
	return ""
}

func (x *Event) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *Event) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

func (x *Event) GetSrc() string {
	if x != nil && x.Src != nil {
		return *x.Src
	}
	return ""
}

func (x *Event) GetWitnesses() []*WitnessEvent {
	if x != nil {
		return x.Witnesses
	}
	return nil
}

func (x *Event) GetIndexSpouse() int32 {
	if x != nil && x.IndexSpouse != nil {
		return *x.IndexSpouse
	}
	return 0
}

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index            *int32            `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	Sex              *Sex              `protobuf:"varint,2,req,name=sex,enum=Sex" json:"sex,omitempty"`
	Lastname         *string           `protobuf:"bytes,3,req,name=lastname" json:"lastname,omitempty"`
	Firstname        *string           `protobuf:"bytes,4,req,name=firstname" json:"firstname,omitempty"`
	Occ              *int32            `protobuf:"varint,5,req,name=occ" json:"occ,omitempty"`
	PublicName       *string           `protobuf:"bytes,6,opt,name=public_name,json=publicName" json:"public_name,omitempty"`
	Aliases          []string          `protobuf:"bytes,7,rep,name=aliases" json:"aliases,omitempty"`
	Qualifiers       []string          `protobuf:"bytes,8,rep,name=qualifiers" json:"qualifiers,omitempty"`
	FirstnameAliases []string          `protobuf:"bytes,9,rep,name=firstname_aliases,json=firstnameAliases" json:"firstname_aliases,omitempty"`
	SurnameAliases   []string          `protobuf:"bytes,10,rep,name=surname_aliases,json=surnameAliases" json:"surname_aliases,omitempty"`
	Image            *bool             `protobuf:"varint,11,opt,name=image,def=0" json:"image,omitempty"`
	BirthDate        *Date             `protobuf:"bytes,12,opt,name=birth_date,json=birthDate" json:"birth_date,omitempty"`
	BirthPlace       *string           `protobuf:"bytes,13,opt,name=birth_place,json=birthPlace" json:"birth_place,omitempty"`
	BirthSrc         *string           `protobuf:"bytes,14,opt,name=birth_src,json=birthSrc" json:"birth_src,omitempty"`
	BaptismDate      *Date             `protobuf:"bytes,15,opt,name=baptism_date,json=baptismDate" json:"baptism_date,omitempty"`
	BaptismPlace     *string           `protobuf:"bytes,16,opt,name=baptism_place,json=baptismPlace" json:"baptism_place,omitempty"`
	BaptismSrc       *string           `protobuf:"bytes,17,opt,name=baptism_src,json=baptismSrc" json:"baptism_src,omitempty"`
	DeathDate        *Date             `protobuf:"bytes,18,opt,name=death_date,json=deathDate" json:"death_date,omitempty"`
	DeathPlace       *string           `protobuf:"bytes,19,opt,name=death_place,json=deathPlace" json:"death_place,omitempty"`
	DeathSrc         *string           `protobuf:"bytes,20,opt,name=death_src,json=deathSrc" json:"death_src,omitempty"`
	DeathType        *DeathType        `protobuf:"varint,21,req,name=death_type,json=deathType,enum=DeathType" json:"death_type,omitempty"`
	BurialDate       *Date             `protobuf:"bytes,22,opt,name=burial_date,json=burialDate" json:"burial_date,omitempty"`
	BurialPlace      *string           `protobuf:"bytes,23,opt,name=burial_place,json=burialPlace" json:"burial_place,omitempty"`
	BurialSrc        *string           `protobuf:"bytes,24,opt,name=burial_src,json=burialSrc" json:"burial_src,omitempty"`
	Occupation       *string           `protobuf:"bytes,25,opt,name=occupation" json:"occupation,omitempty"`
	Psources         *string           `protobuf:"bytes,26,opt,name=psources" json:"psources,omitempty"`
	Titles           []*Title          `protobuf:"bytes,27,rep,name=titles" json:"titles,omitempty"`
	Related          []int32           `protobuf:"varint,28,rep,name=related" json:"related,omitempty"`
	Rparents         []*RelationParent `protobuf:"bytes,29,rep,name=rparents" json:"rparents,omitempty"`
	Access           *Access           `protobuf:"varint,30,opt,name=access,enum=Access,def=0" json:"access,omitempty"`
	Parents          *int32            `protobuf:"varint,31,opt,name=parents" json:"parents,omitempty"`
	Families         []int32           `protobuf:"varint,32,rep,name=families" json:"families,omitempty"`
	Events           []*Event          `protobuf:"bytes,33,rep,name=events" json:"events,omitempty"`
}

// Default values for Person fields.
const (
	Default_Person_Image  = bool(false)
	Default_Person_Access = Access_ACCESS_IFTITLES
)

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_geneanet_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_geneanet_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{6}
}

func (x *Person) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Person) GetSex() Sex {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return Sex_MALE
}

func (x *Person) GetLastname() string {
	if x != nil && x.Lastname != nil {
		return *x.Lastname
	}
	return ""
}

func (x *Person) GetFirstname() string {
	if x != nil && x.Firstname != nil {
		return *x.Firstname
	}
	return ""
}

func (x *Person) GetOcc() int32 {
	if x != nil && x.Occ != nil {
		return *x.Occ
	}
	return 0
}

func (x *Person) GetPublicName() string {
	if x != nil && x.PublicName != nil {
		return *x.PublicName
	}
	return ""
}

func (x *Person) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Person) GetQualifiers() []string {
	if x != nil {
		return x.Qualifiers
	}
	return nil
}

func (x *Person) GetFirstnameAliases() []string {
	if x != nil {
		return x.FirstnameAliases
	}
	return nil
}

func (x *Person) GetSurnameAliases() []string {
	if x != nil {
		return x.SurnameAliases
	}
	return nil
}

func (x *Person) GetImage() bool {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return Default_Person_Image
}

func (x *Person) GetBirthDate() *Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *Person) GetBirthPlace() string {
	if x != nil && x.BirthPlace != nil {
		return *x.BirthPlace
	}
	return ""
}

func (x *Person) GetBirthSrc() string {
	if x != nil && x.BirthSrc != nil {
		return *x.BirthSrc
	}
	return ""
}

func (x *Person) GetBaptismDate() *Date {
	if x != nil {
		return x.BaptismDate
	}
	return nil
}

func (x *Person) GetBaptismPlace() string {
	if x != nil && x.BaptismPlace != nil {
		return *x.BaptismPlace
	}
	return ""
}

func (x *Person) GetBaptismSrc() string {
	if x != nil && x.BaptismSrc != nil {
		return *x.BaptismSrc
	}
	return ""
}

func (x *Person) GetDeathDate() *Date {
	if x != nil {
		return x.DeathDate
	}
	return nil
}

func (x *Person) GetDeathPlace() string {
	if x != nil && x.DeathPlace != nil {
		return *x.DeathPlace
	}
	return ""
}

func (x *Person) GetDeathSrc() string {
	if x != nil && x.DeathSrc != nil {
		return *x.DeathSrc
	}
	return ""
}

func (x *Person) GetDeathType() DeathType {
	if x != nil && x.DeathType != nil {
		return *x.DeathType
	}
	return DeathType_NOT_DEAD
}

func (x *Person) GetBurialDate() *Date {
	if x != nil {
		return x.BurialDate
	}
	return nil
}

func (x *Person) GetBurialPlace() string {
	if x != nil && x.BurialPlace != nil {
		return *x.BurialPlace
	}
	return ""
}

func (x *Person) GetBurialSrc() string {
	if x != nil && x.BurialSrc != nil {
		return *x.BurialSrc
	}
	return ""
}

func (x *Person) GetOccupation() string {
	if x != nil && x.Occupation != nil {
		return *x.Occupation
	}
	return ""
}

func (x *Person) GetPsources() string {
	if x != nil && x.Psources != nil {
		return *x.Psources
	}
	return ""
}

func (x *Person) GetTitles() []*Title {
	if x != nil {
		return x.Titles
	}
	return nil
}

func (x *Person) GetRelated() []int32 {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Person) GetRparents() []*RelationParent {
	if x != nil {
		return x.Rparents
	}
	return nil
}

func (x *Person) GetAccess() Access {
	if x != nil && x.Access != nil {
		return *x.Access
	}
	return Default_Person_Access
}

func (x *Person) GetParents() int32 {
	if x != nil && x.Parents != nil {
		return *x.Parents
	}
	return 0
}

func (x *Person) GetFamilies() []int32 {
	if x != nil {
		return x.Families
	}
	return nil
}

func (x *Person) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type Family struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index         *int32        `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	MarriageDate  *Date         `protobuf:"bytes,2,opt,name=marriage_date,json=marriageDate" json:"marriage_date,omitempty"`
	MarriagePlace *string       `protobuf:"bytes,3,opt,name=marriage_place,json=marriagePlace" json:"marriage_place,omitempty"`
	MarriageSrc   *string       `protobuf:"bytes,4,opt,name=marriage_src,json=marriageSrc" json:"marriage_src,omitempty"`
	MarriageType  *MarriageType `protobuf:"varint,5,req,name=marriage_type,json=marriageType,enum=MarriageType" json:"marriage_type,omitempty"`
	DivorceType   *DivorceType  `protobuf:"varint,6,req,name=divorce_type,json=divorceType,enum=DivorceType" json:"divorce_type,omitempty"`
	DivorceDate   *Date         `protobuf:"bytes,7,opt,name=divorce_date,json=divorceDate" json:"divorce_date,omitempty"`
	Witnesses     []int32       `protobuf:"varint,8,rep,name=witnesses" json:"witnesses,omitempty"`
	Fsources      *string       `protobuf:"bytes,9,opt,name=fsources" json:"fsources,omitempty"`
	Father        *int32        `protobuf:"varint,10,req,name=father" json:"father,omitempty"`
	Mother        *int32        `protobuf:"varint,11,req,name=mother" json:"mother,omitempty"`
	Children      []int32       `protobuf:"varint,12,rep,name=children" json:"children,omitempty"`
}

func (x *Family) Reset() {
	*x = Family{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_geneanet_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Family) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Family) ProtoMessage() {}

func (x *Family) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_geneanet_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Family.ProtoReflect.Descriptor instead.
func (*Family) Descriptor() ([]byte, []int) {
	return file_pkg_geneanet_api_proto_rawDescGZIP(), []int{7}
}

func (x *Family) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Family) GetMarriageDate() *Date {
	if x != nil {
		return x.MarriageDate
	}
	return nil
}

func (x *Family) GetMarriagePlace() string {
	if x != nil && x.MarriagePlace != nil {
		return *x.MarriagePlace
	}
	return ""
}

func (x *Family) GetMarriageSrc() string {
	if x != nil && x.MarriageSrc != nil {
		return *x.MarriageSrc
	}
	return ""
}

func (x *Family) GetMarriageType() MarriageType {
	if x != nil && x.MarriageType != nil {
		return *x.MarriageType
	}
	return MarriageType_MARRIED
}

func (x *Family) GetDivorceType() DivorceType {
	if x != nil && x.DivorceType != nil {
		return *x.DivorceType
	}
	return DivorceType_NOT_DIVORCED
}

func (x *Family) GetDivorceDate() *Date {
	if x != nil {
		return x.DivorceDate
	}
	return nil
}

func (x *Family) GetWitnesses() []int32 {
	if x != nil {
		return x.Witnesses
	}
	return nil
}

func (x *Family) GetFsources() string {
	if x != nil && x.Fsources != nil {
		return *x.Fsources
	}
	return ""
}

func (x *Family) GetFather() int32 {
	if x != nil && x.Father != nil {
		return *x.Father
	}
	return 0
}

func (x *Family) GetMother() int32 {
	if x != nil && x.Mother != nil {
		return *x.Mother
	}
	return 0
}

func (x *Family) GetChildren() []int32 {
	if x != nil {
		return x.Children
	}
	return nil
}

var File_pkg_geneanet_api_proto protoreflect.FileDescriptor

var file_pkg_geneanet_api_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x65, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x03, 0x44, 0x6d, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x22, 0x89, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x63, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x52, 0x03, 0x63, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x70, 0x72, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x03, 0x64, 0x6d, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x44, 0x6d, 0x79, 0x52, 0x03, 0x64, 0x6d, 0x79, 0x12,
	0x18, 0x0a, 0x04, 0x64, 0x6d, 0x79, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e,
	0x44, 0x6d, 0x79, 0x52, 0x04, 0x64, 0x6d, 0x79, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x88, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x70, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x72, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x65, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x65, 0x66, 0x12, 0x24, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x20, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x07, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x74, 0x68, 0x22, 0x59, 0x0a, 0x0c, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x22, 0xfa, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x72, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x2b, 0x0a,
	0x09, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x22, 0xc8, 0x08,
	0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16,
	0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x04, 0x2e, 0x53, 0x65,
	0x78, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x63, 0x63, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x6f,
	0x63, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x5f, 0x73, 0x72, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x53, 0x72, 0x63, 0x12, 0x28, 0x0a, 0x0c, 0x62, 0x61, 0x70, 0x74, 0x69, 0x73, 0x6d, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x62, 0x61, 0x70, 0x74, 0x69, 0x73, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x61, 0x70, 0x74, 0x69, 0x73, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x70, 0x74, 0x69, 0x73, 0x6d, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x70, 0x74, 0x69, 0x73, 0x6d, 0x5f, 0x73,
	0x72, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x70, 0x74, 0x69, 0x73,
	0x6d, 0x53, 0x72, 0x63, 0x12, 0x24, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x64, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x61, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x53, 0x72, 0x63, 0x12, 0x29, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x44,
	0x65, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x65, 0x61, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0b, 0x62, 0x75, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x0a, 0x62, 0x75, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x75, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x75, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x75, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x72, 0x63, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x52, 0x06, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x72, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x07, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x0f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x49, 0x46, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x53, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa9, 0x03, 0x0a, 0x06, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x0d, 0x6d, 0x61, 0x72,
	0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d,
	0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x53, 0x72, 0x63, 0x12,
	0x32, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x64, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x44, 0x69, 0x76, 0x6f,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0c, 0x64, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x64, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x2a, 0x3d, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x12, 0x0d, 0x0a, 0x09, 0x47, 0x52, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x41, 0x4e, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4a, 0x55, 0x4c, 0x49, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x52, 0x45, 0x4e, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x42, 0x52, 0x45,
	0x57, 0x10, 0x03, 0x2a, 0x5b, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x55, 0x52, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x42,
	0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x59, 0x42, 0x45, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x59, 0x45, 0x41,
	0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x59, 0x45, 0x41, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x06,
	0x2a, 0x28, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a, 0x77, 0x0a, 0x09, 0x44, 0x65,
	0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x44,
	0x45, 0x41, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x59, 0x4f, 0x55, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x44, 0x4f, 0x4e, 0x54, 0x5f, 0x4b, 0x4e, 0x4f,
	0x57, 0x5f, 0x57, 0x48, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4f, 0x4e, 0x54,
	0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x5f, 0x49, 0x46, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x41,
	0x44, 0x10, 0x05, 0x2a, 0xde, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x47, 0x41, 0x47, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x58, 0x45, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x4d, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12,
	0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x58, 0x45, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x45, 0x44, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x41, 0x52, 0x52, 0x49, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x10, 0x06, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47,
	0x45, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x41, 0x43, 0x53, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x53, 0x49, 0x44, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x0a, 0x2a, 0x3c, 0x0a, 0x0b, 0x44, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x49, 0x56, 0x4f, 0x52,
	0x43, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x56, 0x4f, 0x52, 0x43, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0x80, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x50, 0x54,
	0x5f, 0x41, 0x44, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x50, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x50, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x50,
	0x54, 0x5f, 0x47, 0x4f, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x50, 0x54, 0x5f, 0x46, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52,
	0x45, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0x3b, 0x0a, 0x09, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x02, 0x2a, 0x44, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x46, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x53, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x8f, 0x0b, 0x0a, 0x09, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f,
	0x42, 0x49, 0x52, 0x54, 0x48, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x45, 0x52, 0x53,
	0x5f, 0x42, 0x41, 0x50, 0x54, 0x49, 0x53, 0x4d, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x50,
	0x45, 0x52, 0x53, 0x5f, 0x44, 0x45, 0x41, 0x54, 0x48, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x50, 0x45, 0x52, 0x53, 0x5f, 0x42, 0x55, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x49, 0x53, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x41, 0x44, 0x48,
	0x45, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x45, 0x52, 0x53,
	0x5f, 0x42, 0x41, 0x50, 0x54, 0x49, 0x53, 0x4d, 0x4c, 0x44, 0x53, 0x10, 0x08, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x42, 0x41, 0x52, 0x4d, 0x49, 0x54, 0x5a, 0x56, 0x41,
	0x48, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x42, 0x41, 0x54,
	0x4d, 0x49, 0x54, 0x5a, 0x56, 0x41, 0x48, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x45,
	0x52, 0x53, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f,
	0x43, 0x49, 0x52, 0x43, 0x55, 0x4d, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4c, 0x44, 0x53, 0x10,
	0x0f, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x50, 0x45, 0x52, 0x53,
	0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x49, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d,
	0x49, 0x4c, 0x49, 0x54, 0x41, 0x49, 0x52, 0x45, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50,
	0x45, 0x52, 0x53, 0x5f, 0x44, 0x49, 0x50, 0x4c, 0x4f, 0x4d, 0x41, 0x10, 0x12, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x44, 0x4f,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x45, 0x52,
	0x53, 0x5f, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4c, 0x44, 0x53, 0x10, 0x15, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x45, 0x52,
	0x53, 0x5f, 0x45, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x45,
	0x52, 0x53, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x4c, 0x49, 0x4e, 0x4b, 0x4c, 0x44, 0x53,
	0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x1b, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x1c, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x55, 0x41, 0x54,
	0x45, 0x10, 0x1d, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x48, 0x4f, 0x53,
	0x50, 0x49, 0x54, 0x41, 0x4c, 0x49, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x49, 0x4c, 0x4c, 0x4e, 0x45, 0x53, 0x53, 0x10,
	0x1f, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x49, 0x4d, 0x4d, 0x49, 0x47,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x20, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x45, 0x52,
	0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x50, 0x41, 0x53, 0x53, 0x45, 0x4e, 0x47, 0x45, 0x52,
	0x10, 0x21, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x4d, 0x49, 0x4c, 0x49,
	0x54, 0x41, 0x52, 0x59, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x22, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x4d, 0x49, 0x4c, 0x49, 0x54,
	0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x23, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x4d, 0x49, 0x4c, 0x49, 0x54, 0x41, 0x52, 0x59,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x24, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x50, 0x45,
	0x52, 0x53, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x49, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d,
	0x49, 0x4c, 0x49, 0x54, 0x41, 0x49, 0x52, 0x45, 0x10, 0x25, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50,
	0x45, 0x52, 0x53, 0x5f, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x49, 0x53, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x26, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x4f, 0x43,
	0x43, 0x55, 0x50, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50,
	0x45, 0x52, 0x53, 0x5f, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x28,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52,
	0x54, 0x59, 0x10, 0x29, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x50, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x2b,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x2c, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x53, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x4e, 0x54, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x4c, 0x44, 0x53, 0x10, 0x2d, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x4e,
	0x54, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x4c, 0x44, 0x53, 0x10, 0x2e, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x4e, 0x54, 0x53, 0x50,
	0x4f, 0x55, 0x53, 0x45, 0x4c, 0x44, 0x53, 0x10, 0x2f, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x50, 0x45,
	0x52, 0x53, 0x5f, 0x56, 0x45, 0x4e, 0x54, 0x45, 0x42, 0x49, 0x45, 0x4e, 0x10, 0x30, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x57, 0x49, 0x4c, 0x4c, 0x10, 0x31, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x46, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47, 0x45, 0x10,
	0x32, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x46, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x52,
	0x52, 0x49, 0x41, 0x47, 0x45, 0x10, 0x33, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46, 0x41, 0x4d, 0x5f,
	0x4e, 0x4f, 0x5f, 0x4d, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x34, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x46, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x47, 0x41, 0x47, 0x45, 0x10, 0x35, 0x12, 0x10, 0x0a,
	0x0c, 0x45, 0x46, 0x41, 0x4d, 0x5f, 0x44, 0x49, 0x56, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x36, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x46, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x37, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46, 0x41, 0x4d, 0x5f, 0x41, 0x4e, 0x4e, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x38, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x46, 0x41, 0x4d,
	0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x10, 0x39,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x46, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x3a, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x46, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x3b, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x46, 0x41, 0x4d, 0x5f,
	0x50, 0x41, 0x43, 0x53, 0x10, 0x3c, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x46, 0x41, 0x4d, 0x5f, 0x52,
	0x45, 0x53, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x3d, 0x2a, 0x46, 0x0a, 0x0b, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x54,
	0x4e, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x49, 0x54, 0x4e, 0x45, 0x53,
	0x53, 0x5f, 0x47, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x57, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45, 0x52,
	0x10, 0x02, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x61, 0x70, 0x69,
}

var (
	file_pkg_geneanet_api_proto_rawDescOnce sync.Once
	file_pkg_geneanet_api_proto_rawDescData = file_pkg_geneanet_api_proto_rawDesc
)

func file_pkg_geneanet_api_proto_rawDescGZIP() []byte {
	file_pkg_geneanet_api_proto_rawDescOnce.Do(func() {
		file_pkg_geneanet_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_geneanet_api_proto_rawDescData)
	})
	return file_pkg_geneanet_api_proto_rawDescData
}

var file_pkg_geneanet_api_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_pkg_geneanet_api_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pkg_geneanet_api_proto_goTypes = []interface{}{
	(Calendar)(0),           // 0: Calendar
	(Precision)(0),          // 1: Precision
	(Sex)(0),                // 2: Sex
	(DeathType)(0),          // 3: DeathType
	(MarriageType)(0),       // 4: MarriageType
	(DivorceType)(0),        // 5: DivorceType
	(RelationParentType)(0), // 6: RelationParentType
	(TitleType)(0),          // 7: TitleType
	(Access)(0),             // 8: Access
	(EventName)(0),          // 9: EventName
	(WitnessType)(0),        // 10: WitnessType
	(*Dmy)(nil),             // 11: Dmy
	(*Date)(nil),            // 12: Date
	(*RelationParent)(nil),  // 13: RelationParent
	(*Title)(nil),           // 14: Title
	(*WitnessEvent)(nil),    // 15: WitnessEvent
	(*Event)(nil),           // 16: Event
	(*Person)(nil),          // 17: Person
	(*Family)(nil),          // 18: Family
}
var file_pkg_geneanet_api_proto_depIdxs = []int32{
	0,  // 0: Date.cal:type_name -> Calendar
	1,  // 1: Date.prec:type_name -> Precision
	11, // 2: Date.dmy:type_name -> Dmy
	11, // 3: Date.dmy2:type_name -> Dmy
	6,  // 4: RelationParent.rpt_type:type_name -> RelationParentType
	7,  // 5: Title.title_type:type_name -> TitleType
	12, // 6: Title.date_begin:type_name -> Date
	12, // 7: Title.date_end:type_name -> Date
	10, // 8: WitnessEvent.witness_type:type_name -> WitnessType
	9,  // 9: Event.name:type_name -> EventName
	12, // 10: Event.date:type_name -> Date
	15, // 11: Event.witnesses:type_name -> WitnessEvent
	2,  // 12: Person.sex:type_name -> Sex
	12, // 13: Person.birth_date:type_name -> Date
	12, // 14: Person.baptism_date:type_name -> Date
	12, // 15: Person.death_date:type_name -> Date
	3,  // 16: Person.death_type:type_name -> DeathType
	12, // 17: Person.burial_date:type_name -> Date
	14, // 18: Person.titles:type_name -> Title
	13, // 19: Person.rparents:type_name -> RelationParent
	8,  // 20: Person.access:type_name -> Access
	16, // 21: Person.events:type_name -> Event
	12, // 22: Family.marriage_date:type_name -> Date
	4,  // 23: Family.marriage_type:type_name -> MarriageType
	5,  // 24: Family.divorce_type:type_name -> DivorceType
	12, // 25: Family.divorce_date:type_name -> Date
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_pkg_geneanet_api_proto_init() }
func file_pkg_geneanet_api_proto_init() {
	if File_pkg_geneanet_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_geneanet_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dmy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_geneanet_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_geneanet_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationParent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_geneanet_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Title); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_geneanet_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WitnessEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_geneanet_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_geneanet_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_geneanet_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Family); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_geneanet_api_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_geneanet_api_proto_goTypes,
		DependencyIndexes: file_pkg_geneanet_api_proto_depIdxs,
		EnumInfos:         file_pkg_geneanet_api_proto_enumTypes,
		MessageInfos:      file_pkg_geneanet_api_proto_msgTypes,
	}.Build()
	File_pkg_geneanet_api_proto = out.File
	file_pkg_geneanet_api_proto_rawDesc = nil
	file_pkg_geneanet_api_proto_goTypes = nil
	file_pkg_geneanet_api_proto_depIdxs = nil
}
